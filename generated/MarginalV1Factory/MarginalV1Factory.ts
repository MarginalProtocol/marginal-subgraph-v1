// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LeverageEnabled extends ethereum.Event {
  get params(): LeverageEnabled__Params {
    return new LeverageEnabled__Params(this);
  }
}

export class LeverageEnabled__Params {
  _event: LeverageEnabled;

  constructor(event: LeverageEnabled) {
    this._event = event;
  }

  get maintenance(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get leverage(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnerChanged extends ethereum.Event {
  get params(): OwnerChanged__Params {
    return new OwnerChanged__Params(this);
  }
}

export class OwnerChanged__Params {
  _event: OwnerChanged;

  constructor(event: OwnerChanged) {
    this._event = event;
  }

  get oldOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get token0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get maintenance(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get oracle(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class MarginalV1Factory extends ethereum.SmartContract {
  static bind(address: Address): MarginalV1Factory {
    return new MarginalV1Factory("MarginalV1Factory", address);
  }

  createPool(
    tokenA: Address,
    tokenB: Address,
    maintenance: i32,
    uniswapV3Fee: i32
  ): Address {
    let result = super.call(
      "createPool",
      "createPool(address,address,uint24,uint24):(address)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(maintenance)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(uniswapV3Fee))
      ]
    );

    return result[0].toAddress();
  }

  try_createPool(
    tokenA: Address,
    tokenB: Address,
    maintenance: i32,
    uniswapV3Fee: i32
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createPool",
      "createPool(address,address,uint24,uint24):(address)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(maintenance)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(uniswapV3Fee))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLeverage(param0: i32): BigInt {
    let result = super.call("getLeverage", "getLeverage(uint24):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);

    return result[0].toBigInt();
  }

  try_getLeverage(param0: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getLeverage", "getLeverage(uint24):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPool(
    param0: Address,
    param1: Address,
    param2: i32,
    param3: Address
  ): Address {
    let result = super.call(
      "getPool",
      "getPool(address,address,uint24,address):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param2)),
        ethereum.Value.fromAddress(param3)
      ]
    );

    return result[0].toAddress();
  }

  try_getPool(
    param0: Address,
    param1: Address,
    param2: i32,
    param3: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPool",
      "getPool(address,address,uint24,address):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param2)),
        ethereum.Value.fromAddress(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  marginalV1Deployer(): Address {
    let result = super.call(
      "marginalV1Deployer",
      "marginalV1Deployer():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_marginalV1Deployer(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "marginalV1Deployer",
      "marginalV1Deployer():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  observationCardinalityMinimum(): i32 {
    let result = super.call(
      "observationCardinalityMinimum",
      "observationCardinalityMinimum():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_observationCardinalityMinimum(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "observationCardinalityMinimum",
      "observationCardinalityMinimum():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  uniswapV3Factory(): Address {
    let result = super.call(
      "uniswapV3Factory",
      "uniswapV3Factory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_uniswapV3Factory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniswapV3Factory",
      "uniswapV3Factory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _marginalV1Deployer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _uniswapV3Factory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _observationCardinalityMinimum(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get maintenance(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get uniswapV3Fee(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class EnableLeverageCall extends ethereum.Call {
  get inputs(): EnableLeverageCall__Inputs {
    return new EnableLeverageCall__Inputs(this);
  }

  get outputs(): EnableLeverageCall__Outputs {
    return new EnableLeverageCall__Outputs(this);
  }
}

export class EnableLeverageCall__Inputs {
  _call: EnableLeverageCall;

  constructor(call: EnableLeverageCall) {
    this._call = call;
  }

  get maintenance(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class EnableLeverageCall__Outputs {
  _call: EnableLeverageCall;

  constructor(call: EnableLeverageCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}
