type Factory @entity {
  # factory address
  id: ID!
  # deployer address
  deployer: ID!
  # uni v3 factory address
  uniV3Factory: ID!
  # observation cardinality min
  minCardinality: BigInt!
  # amount of pools created
  poolCount: BigInt!
  # amount of all time transactions
  txCount: BigInt!
  # factory owner
  owner: ID!
  # pools deployed by factory
  pools: [Pool!]! @derivedFrom(field: "factory")
}

type Pool @entity {
  # pool address
  id: ID!
  # pool tokens name
  tokenPair: String!
  # pool address in Bytes
  address: Bytes!
  # decimals for pool token
  decimals: BigInt!
  # factory address
  factory: Factory!
  # oracle address:
  oracle: ID!
  # created timestamp
  createdAtTimestamp: BigInt!
  # created block number
  createdAtBlockNumber: BigInt!
  # token0
  token0: Token!
  # token1
  token1: Token!
  # maintenance margin
  maintenance: BigInt!
  # all time number of transactions
  txCount: BigInt!
  # fee
  fee: BigInt!
  # reward
  rewardPremium: BigInt!
  # liquidity locked
  liquidityLocked: BigInt!
  # positions held on pool
  positions: [Position!]! @derivedFrom(field: "pool")
  # staking rewards pool
  stakePool: StakePool
}

type MultiRewardsFactory @entity {
  # multirewards factory address
  id: ID!
  # stake pools deployed by multirewards factory
  stakePools: [StakePool!]! @derivedFrom(field: "multiRewardsFactory")
}

type StakePool @entity {
  # multirewards stake pool address
  id: ID!
  # multirewards factory
  multiRewardsFactory: MultiRewardsFactory!
  # stake token
  stakeToken: Bytes!
}


type Token @entity {
  # token address
  id: ID!
  address: ID!
  # token symbol
  symbol: String!
  # token name
  name: String!
  # token decimals
  decimals: BigInt!
}

type TokenPositionMapping @entity {
  id: ID!
  tokenId: String!
  positionId: String!
  poolAddress: ID!
}

type Position @entity {
  # poolAddress-positionId
  id: ID!
  # tokenId
  tokenId: String
  # positionId in pool
  positionId: String!
  # owner of position
  owner: ID!
  # pool address of position
  pool: Pool!
  # initial margin at time of open
  initialMargin: BigInt
  # initial sqrtPriceX96After at time of open
  initialSqrtPriceX96After: BigInt
  # margin
  margin: BigInt
  # margin amountOut at time of close / liquidate
  marginAmountOut: BigInt
  # position zeroForOne
  zeroForOne: Boolean
  # created at block number
  blockNumber: BigInt
  # created at timestamp
  timestamp: BigInt
  # created at tx hash
  transaction: Transaction!
  # is position liquidated
  isLiquidated: Boolean!
  # is position settled
  isSettled: Boolean!
  # either settled/liquidated is true
  isClosed: Boolean!
  # escrow rewards
  rewards: BigInt
}

type Transaction @entity {
  # tx hash
  id: ID!
  # block txn was included in
  blockNumber: BigInt!
  # timestamp txn was confirmed
  timestamp: BigInt!
  # gas settings during tx execution
  gasLimit: BigInt!
  gasPrice: BigInt!
  # derived values
  open: [Open!]! @derivedFrom(field: "transaction")
  adjust: [Adjust!]! @derivedFrom(field: "transaction")
  settle: [Settle!]! @derivedFrom(field: "transaction")
  liquidate: [Liquidate!]! @derivedFrom(field: "transaction")
  ## TODO: Add Swap, Mint, Burn
}

type Open @entity {
  # position id
  id: ID!
  # txn that position was opened in
  transaction: Transaction!
  # time of txn
  timestamp: BigInt!
  # pool position created in
  pool: Pool!
  # pool token0
  token0: Token!
  # pool token1
  token1: Token!
  # owner of position
  owner: Bytes!
  # address that minted position
  sender: Bytes!
  # position margin
  margin: BigInt!
}

type Adjust @entity {
  # position id
  id: ID!
  # txn that position was adjusted in
  transaction: Transaction!
  # time of txn
  timestamp: BigInt!
  # pool position adjusted in
  pool: Pool!
  # pool token0
  token0: Token!
  # pool token1
  token1: Token!
  # owner of position
  owner: Bytes!
  # receipient of adjusted position
  recipient: Bytes!
  # position margin
  margin: BigInt!
}

type Settle @entity {
  # position id
  id: ID!
  # txn that position was settled in
  transaction: Transaction!
  # time of txn
  timestamp: BigInt!
  # pool position settled in
  pool: Pool!
  # pool token0
  token0: Token!
  # pool token1
  token1: Token!
  # owner of position
  owner: Bytes!
  # receipient of closed position
  recipient: Bytes!
  # amount received
  rewards: BigInt!
}

type Liquidate @entity {
  # position id
  id: ID!
  # txn that position was liquidated
  transaction: Transaction!
  # time of txn
  timestamp: BigInt!
  # pool position liquidated in
  pool: Pool!
  # pool token0
  token0: Token!
  # pool token1
  token1: Token!
  # owner of position
  owner: Bytes!
  # receipient of rewards for liquidating
  recipient: Bytes!
  # amount received
  rewards: BigInt!
}

########################
# MarginalV1LB contracts
########################

type MarginalV1LBFactory @entity {
  # Contract variables

  # marginalV1Deployer address
  marginalV1Deployer: ID!
  # factory owner
  owner: ID!
  # feeProtocol (uint8)
  feeProtocol: Int!

  # State variables

  # amount of pools created
  poolCount: BigInt!
  # amount of all time transactions
  txCount: BigInt!
  # pools deployed by factory
  pools: [MarginalV1LBPool!]! @derivedFrom(field: "factory")
  # factory address
  id: ID!
}

type MarginalV1LBPool @entity {
  # Contract variables

  # factory address
  factory: MarginalV1LBFactory!
  # token0
  token0: Token!
  # token1
  token1: Token!
  # tick lower
  tickLower: Int!
  # tick upper
  tickUpper: Int!
  # sqrtPriceLowerX96
  sqrtPriceLowerX96: BigInt!
  # sqrtPriceUpperX96
  sqrtPriceUpperX96: BigInt!
  # supplier address
  supplier: ID!
  # blockTimestampInitialize
  blockTimestampInitialize: BigInt!
  # sqrtPriceInitializeX96 (can be null when pool is not initialized)
  sqrtPriceInitializeX96: BigInt
  # sqrtPriceFinalizeX96 (can be null when pool is not initialized)
  sqrtPriceFinalizeX96: BigInt

  # State variables

  #   struct State {
  #     uint160 sqrtPriceX96;
  #     uint96 totalPositions; // > ~ 2e20 years at max per block to fill on mainnet
  #     uint128 liquidity;
  #     int24 tick;
  #     uint32 blockTimestamp;
  #     int56 tickCumulative;
  #     uint8 feeProtocol;
  #     bool finalized;
  # }
  # sqrtPriceX96
  sqrtPriceX96: BigInt!
  # totalPositions
  totalPositions: BigInt!
  # liquidity
  liquidity: BigInt!
  # tick
  tick: Int!
  # blockTimestamp
  blockTimestamp: BigInt!
  # tickCumulative
  tickCumulative: BigInt!
  # feeProtocol
  feeProtocol: Int!
  # finalized
  finalized: Boolean!

  # Global none-contract state variables

  # pool address
  id: ID!
  # pool tokens name
  tokenPair: String!
  # decimals for pool token
  decimals: BigInt!
  # created timestamp
  createdAtTimestamp: BigInt!
  # created block number
  createdAtBlockNumber: BigInt!
  # all time number of transactions
  txCount: BigInt!

  # Derived
  positions: [MarginalV1LBPosition!]! @derivedFrom(field: "pool")

  # Only 1 single mint event during pool initialization
  mint: MarginalV1LBPoolMint @derivedFrom(field: "pool")

  # Only 1 single burn event during pool finalization
  burn: MarginalV1LBPoolBurn @derivedFrom(field: "pool")

  swaps: [MarginalV1LBPoolSwap!]! @derivedFrom(field: "pool")
}

type MarginalV1LBFactoryCollectProtocol @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  token: Bytes! # address
  recipient: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MarginalV1LBFactoryOwnerChanged @entity(immutable: true) {
  id: Bytes!
  oldOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MarginalV1LBFactoryPoolCreated @entity(immutable: true) {
  id: Bytes!
  token0: Bytes! # address
  token1: Bytes! # address
  tickLower: Int! # int24
  tickUpper: Int! # int24
  supplier: Bytes! # address
  blockTimestampInitialize: BigInt! # uint256
  pool: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MarginalV1LBFactorySetFeeProtocol @entity(immutable: true) {
  id: Bytes!
  oldFeeProtocol: Int! # uint8
  newFeeProtocol: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ReceiverDeployed @entity(immutable: true) {
  id: Bytes!
  pool: Bytes! # address
  data: Bytes! # bytes
  receiver: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type MarginalV1LBPoolApproval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MarginalV1LBPoolBurn @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  pool: MarginalV1LBPool! # address
  recipient: Bytes! # address
  liquidityDelta: BigInt! # uint128
  amount0: BigInt! # uint256
  amount1: BigInt! # uint256
  fees0: BigInt! # uint256
  fees1: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MarginalV1LBPoolFinalize @entity(immutable: true) {
  id: Bytes!
  liquidityDelta: BigInt! # uint128
  sqrtPriceX96: BigInt! # uint160
  tick: Int! # int24
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MarginalV1LBPoolMint @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  owner: Bytes! # address
  pool: MarginalV1LBPool! # address
  liquidityDelta: BigInt! # uint128
  amount0: BigInt! # uint256
  amount1: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MarginalV1LBPoolSwap @entity(immutable: true) {
  id: Bytes!
  pool: MarginalV1LBPool! # address
  sender: Bytes! # address
  recipient: Bytes! # address
  amount0: BigInt! # int256
  amount1: BigInt! # int256
  sqrtPriceX96: BigInt! # uint160
  liquidity: BigInt! # uint128
  tick: Int! # int24
  finalized: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MarginalV1LBPoolTransfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MarginalV1LBPosition @entity {
  # poolAddress-owner
  id: ID!
  # pool
  pool: MarginalV1LBPool!
  # owner of position
  owner: ID!
  # shares
  liquidity: BigInt!
}